<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Roy.red</title><link href="http://roy.red/" rel="alternate"></link><link href="http://roy.red/feeds/glsl.atom.xml" rel="self"></link><id>http://roy.red/</id><updated>2017-01-03T17:34:06-08:00</updated><entry><title>3D Kaleidoscopic Fractals: Folding the Koch Snowflake</title><link href="http://roy.red/folding-the-koch-snowflake-.html" rel="alternate"></link><published>2017-01-03T17:34:06-08:00</published><updated>2017-01-03T17:34:06-08:00</updated><author><name>Roy Wiggins</name></author><id>tag:roy.red,2017-01-03:folding-the-koch-snowflake-.html</id><summary type="html">&lt;p&gt;I came across a shader that generated a &lt;a href="https://www.shadertoy.com/view/XdcGzH"&gt;very pretty version&lt;/a&gt; of the Koch snowflake](https://en.wikipedia.org/wiki/Koch_snowflake). I realized that after stepping through the code that the Koch snowflake is a good, simple example of generating fractals with folds. The code here is in the form of fragment shaders. For a shader primer, check out the &lt;a href="http://thebookofshaders.com/"&gt;Book of Shaders&lt;/a&gt;. The important thing is that to write a fragment shader, you build a function that takes a location (in our case, of a pixel) and returns a color. All the code here is "live", though changes you make in each box will not cascade down to the subsequent ones.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://acko.net/blog/how-to-fold-a-julia-fractal/"&gt;&lt;img style="float: right;" width="300" src="http://roy.red/images/julia-iter.gif"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generating the Koch curve this way is probably among the simplest examples of how fractals can be thought of as a repeated crumpling of space. The animation to the right is borrowed from &lt;a href="http://acko.net/blog/how-to-fold-a-julia-fractal/"&gt;a presentation&lt;/a&gt; by Steven Wittens that ably demonstrates this with a Julia fractal: squishing, translating and folding space progressively crumples up the boundary of the unit circle.&lt;/p&gt;
&lt;p&gt;For the Koch curve, we need a different sort of fold. It's easiest to understand the folding operation visually. I haven't taken the time to justify this formula, but it's just trigonometry. You can adjust the angle to see how it creates a kaleidoscopic effect, reflecting the plane across a line through the origin. &lt;/p&gt;
&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;div class="codeAndCanvas" literate data="vec2 fold(vec2 p, float ang){
    vec2 n=vec2(cos(-ang),sin(-ang));
    p-=2.*min(0.,dot(p,n))*n;
    return p;
}
vec3 color(vec2 pt) {
    // Adjust the angle of the fold here
    pt=fold(pt,0.284);
    return vec3(10.*sin(10.*pt.x)*sin(10.*pt.y));
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;Now we are going to start drawing a line. This formula calculates the distance to a line segment between &lt;span class="math"&gt;\((0,0)\)&lt;/span&gt; and &lt;span class="math"&gt;\((1,0)\)&lt;/span&gt;. This is the line we're going to fold up into a Koch curve.&lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="float d2hline(vec2 p){
    p.x-=max(0.,min(1.,p.x));
    return length(p)*5.;
}
vec3 color(vec2 pt) {
    pt=pt*2.;
    return vec3(d2hline(pt));
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;There are two folds: first, across the angle &lt;span class="math"&gt;\(\frac{\pi}{6}\)&lt;/span&gt;, and then horizontally. &lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="
vec2 koch_fold(vec2 pt) {
    // Fold horizontally
    pt.x = abs(pt.x);
    pt.x-=.5;
    //Fold across PI/6
    pt = fold(pt,PI/6.);
    return pt;
}
vec3 color(vec2 pt) {
    pt*=2.;
    pt=koch_fold(pt);
    return vec3(d2hline(pt));
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;We can iterate by moving and scaling the folded line to lie along the original line (from &lt;span class="math"&gt;\((0,0)\)&lt;/span&gt; to &lt;span class="math"&gt;\((0,1)\)&lt;/span&gt;) and then folding the line up again.&lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="vec3 color(vec2 pt) {
    pt*=2.;
    pt=koch_fold(pt); // Fold again
    // Move it to lie along the (0,1) line
    pt*=3.;
    pt.x-=1.5;
    pt=koch_fold(pt); // Fold once
    return vec3(d2hline(pt));
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;And we can iterate this as many times as we'd like. It converges very rapidly, so you only need a handful of folds.&lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="vec2 koch_curve(vec2 pt) {
    //Fold and scale a few times
    for(int i=0;i&lt;5;i++){
        pt*=3.;
        pt.x-=1.5;
        pt=koch_fold(pt);
    }
    return pt;
}
vec3 color(vec2 pt) {
    pt = pt*.5+.5;
    pt = koch_curve(pt);
    return vec3(d2hline(pt)/5.);
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;And just for fun, we can do two more folds to create two copies of the curve to create the Koch Snowflake. &lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="vec3 color(vec2 pt) {
    pt = pt*.7;
    pt -= vec2(.5,.3);
    pt = fold(pt,-2.*PI/3.);
    pt.x += 1.;
    pt = fold(pt,-PI/3.);
    pt = koch_curve(pt);
    return vec3(d2hline(pt)/5.);
}"&gt;&lt;/div&gt;

&lt;p&gt;A small adjustment and we get another familiar fractal, a Sierpinski triangle, or close enough. I recommend you adjust the number of iterations to get a feel for how it converges.&lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="
vec2 tri_fold(vec2 pt) {
    pt = fold(pt,PI/6.);
    pt = fold(pt,-PI/6.);
    return pt;
}
vec2 tri_curve(vec2 pt) {
    for(int i=0;i&lt;7;i++){
        pt*=2.;
        pt.x-=1.;
        pt=tri_fold(pt);
    }
    return pt;
}
vec3 color(vec2 pt) {
    pt -= vec2(-1,.1);
    pt *= .5;
    pt = tri_curve(pt);
    return vec3(d2hline(pt)/7.);
}"&gt;&lt;/div&gt;

&lt;p&gt;You might have worked this out already: I've been keeping something from you. The real motivation here is to justify a wider class of fractals, dubbed Kaleidoscopic Iterated Function Systems, or KIFS. KIFS are what you get when you start folding and scaling around different axes. A myriad of fractals fall out, and you can see why they're called Kaleidoscopic- for the mirroring folds they're built out of. Here's an example. These reward fiddling: adjust the parameters to get a slightly better sense of how the folds affect the final output. &lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="vec2 gen_fold(vec2 pt) {
    pt = fold(pt,-2.9);
    pt = fold(pt,.9);
    pt.y+=sin(u_time)+1.;
    pt = fold(pt,-1.0);
    return pt;
}
vec2 gen_curve(vec2 pt) {
    for(int i=0;i&lt;9;i++){
        pt*=2.;
        pt.x-=1.;
        pt=gen_fold(pt);
    }
    return pt;
}
vec3 color(vec2 pt) {
    pt -= vec2(-0.630,0.000);
    pt *= .8;
    pt = gen_curve(pt);
    return vec3(d2hline(pt)/6.);
}"&gt;&lt;/div&gt;

&lt;p&gt;Another confession: In truth, we haven't just been building a black and white image. We've been calculating a 2D distance estimator to the fractal. For any point in the plane, the value of our function is an approximation of the distance to the fractal. We can illustrate it by taking the modulo of the value:&lt;/p&gt;
&lt;div class="codeAndCanvas" literate data="vec3 color(vec2 pt) {
    pt = pt*.7;
    pt += vec2(.5,0.);
    pt = koch_curve(pt);
    return vec3(mod(d2hline(pt)/70.,1.));
}"&gt;&lt;/div&gt;

&lt;p&gt;Final confession: this distance estimator? It's not useful. At least, not in 2D. But it's &lt;em&gt;exactly&lt;/em&gt; what we need to draw pictures of three-dimensional KIFS fractals. &lt;a href="http://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html"&gt;Raymarching&lt;/a&gt; is a rendering tool that can render pretty much any surface if you have an estimate of the distance to the surface from any point in space. &lt;/p&gt;
&lt;p&gt;All we need to adjust is adding some folds that live inside the &lt;span class="math"&gt;\(yz\)&lt;/span&gt; plane, rather than keeping in the &lt;span class="math"&gt;\(xy\)&lt;/span&gt; plane. Taking that distance estimate and plugging it into a raymarcher, we get similar 3D fractals! Try adjusting the fold angles to get a sense of the sorts of shapes this is capable of. &lt;/p&gt;
&lt;div class="codeAndCanvas" literate override="DE" data="vec3 tri_fold(vec3 pt) {
    pt.xy = fold(pt.xy,PI/3.-cos(u_time)/10.);
    pt.xy = fold(pt.xy,-PI/3.);
    pt.yz = fold(pt.yz,-PI/6.+sin(u_time)/2.);
    pt.yz = fold(pt.yz,PI/6.);
    return pt;
}
vec3 tri_curve(vec3 pt) {
    for(int i=0;i&lt;7;i++){
        pt*=2.;
        pt.x-=2.6;
        pt=tri_fold(pt);
    }
    return pt;
}
float DE(vec3 p){
    p *= .75;
    p.x+=1.5;
    p=tri_curve(p);
    return (length( p*.004 ) - .01);
}
vec3 color(vec2 pt) {
    return simple_raymarch(pt);
}"&gt;&lt;/div&gt;

&lt;p&gt;You can play with the full source to this fractal &lt;a href="http://roy.red/editor/#/shaders/kifs.frag"&gt;here&lt;/a&gt;. This is a very simple and unoptimized renderer, and I'm not adept enough at writing raymarchers to tune it perfectly. More sophisticated and well-tuned renderers can draw much prettier pictures! &lt;/p&gt;
&lt;p&gt;For more information you should check out my main source for this post, Mikael Hvidtfeldt Christensen's &lt;a href="http://blog.hvidtfeldts.net/index.php/2011/06/distance-estimated-3d-fractals-part-i/"&gt;series on distance estimated 3D fractals&lt;/a&gt;, which covers KIFS and more. His program Fragmentarium comes with a number of KIFS fractals built in, and produces some very pretty results. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="glsl"></category></entry><entry><title>Drawing fractal Droste images</title><link href="http://roy.red/fractal-droste-images-.html" rel="alternate"></link><published>2016-05-17T21:31:41-07:00</published><updated>2016-05-17T21:31:41-07:00</updated><author><name>Roy Wiggins</name></author><id>tag:roy.red,2016-05-17:fractal-droste-images-.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.flickr.com/photos/fpsurgeon/2680685329/in/pool-escherdroste"&gt;&lt;img style="float: right;" width="300" src="http://roy.red/images/2droste.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I was researching Droste images for a &lt;a href="/droste-.html"&gt;previous post&lt;/a&gt;, I occasionally came across strange versions which depicted multiple spirals, rather than the customary single spiral, like this one by David Pearson. This led me down a rabbit hole to understand what is actually going on in these images, and to see what I could make with the effect. &lt;/p&gt;
&lt;p&gt;This is going to be a longer post, so feel free to scroll to the end to see the final fractal results. Spoiler alert: Mandelbrots.&lt;/p&gt;
&lt;p&gt;As with my previous posts, the embedded examples are all live shader code, and will automatically update as you edit them. They might not work correctly on all computers; your browser must support WebGL without too many bugs.&lt;/p&gt;
&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;To begin with, I'm going to talk about complex functions. Complex functions take a complex number as input and return another. It's a bit tricky to visualize them, since between the two-dimensional range and two-dimensional domain, the result is four-dimensional. A common method for visualizing these functions is &lt;a href="https://en.wikipedia.org/wiki/Domain_coloring"&gt;domain coloring&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    return vec3(hsv2rgb(vec3(atan(z.y,z.x)/PI2,1.,1.)));
}
vec3 color(vec2 z) {
    return domain(z);
}"&gt;&lt;/div&gt;

&lt;p&gt;The idea behind domain coloring is that you draw a picture of a complex function &lt;span class="math"&gt;\(f: \mathbb{ C } \mapsto \mathbb{ C }\)&lt;/span&gt; by coloring the domain and pulling those colors back by &lt;span class="math"&gt;\(f\)&lt;/span&gt;. In other words you color &lt;span class="math"&gt;\(z\)&lt;/span&gt; the same as &lt;span class="math"&gt;\(f(z)\)&lt;/span&gt; is colored. The particular method I'm using is called a phase portrait, borrowed from Elias Wegert. It colors the domain by the phase, or the angle it makes with the positive real axis. For more information, &lt;a href="http://www.ams.org/notices/201106/rtx110600768p.pdf"&gt;his article on the subject&lt;/a&gt; is a must-read.&lt;/p&gt;
&lt;p&gt;In the example above, I'm just drawing the domain with no complex function at all (or, if you like, the identity &lt;span class="math"&gt;\(f: z \mapsto z\)&lt;/span&gt;). Notice that it's very obvious where &lt;span class="math"&gt;\(0\)&lt;/span&gt; is, because the colors all "bunch up" around it. We'll see a similar effect near the zeros of a more complicated function. Here is the phase portrait for &lt;span class="math"&gt;\(f: z \mapsto z / (z^2 + z + 1)\)&lt;/span&gt;. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    return vec3(hsv2rgb(vec3(atan(z.y,z.x)/PI2,1.,1.)));
}
vec3 color(vec2 z) {
    z = z * 2.;
    z = cDiv(z-vec2(1.,0), cMul(z,z)+z+vec2(1.,0));
    return domain(z);
}"&gt;&lt;/div&gt;

&lt;p&gt;Something funny's happening. There's three zero-like regions, but the two on the left are different- if you follow the hues around in a circle, they are cycling the "wrong way". They're not zeros at all, but poles: the center of these regions is where &lt;span class="math"&gt;\(f\)&lt;/span&gt; goes to infinity. You can't explain this easily without invoking the Riemann sphere, which is much less intimidating than it sounds. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="60%" src="http://upload.wikimedia.org/wikipedia/commons/7/7c/Riemann_sphere1.jpg"/&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Imagine that the complex plane is actually sitting in 3D space. If you place a sphere at the origin, you can &lt;a href=""&gt;stereographically project&lt;/a&gt; points on the plane (complex numbers) to the sphere and back again, by casting a ray out from the top of the sphere. The lower hemisphere is identified with the unit disk, while the northern upper is identified with the entire rest of the plane. This is the Riemann sphere. An ant that lives on the complex plane that starts at the origin, can march outwards and the further it goes, the further its twin on the sphere approaches the north pole. If we map our domain coloring to the Riemann sphere, the colors get "gathered together" at the top of the sphere, which is why they gather together around infinities as well. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    return vec3(hsv2rgb(vec3(atan(z.y,z.x)/PI2,1.,1.)));
}
vec3 color(vec2 z) {
    float onSphere;
    // sphereViewer textures a sphere by stereographic projection
    z = sphereViewer(z,onSphere); 
    if (onSphere &gt; 0.)
        // Color this part of the sphere by its projection
        return domain(z)-circle(z,.5);
    return vec3(0);
}"&gt;&lt;/div&gt;

&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;p&gt;On the sphere above, I've drawn a circle with radius &lt;span class="math"&gt;\(0.5\)&lt;/span&gt; to help orient us; it gets projected to the lower hemisphere. Wave your mouse cursor over the sphere to tip it up and down. The sphere is &lt;a href="http://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html"&gt;raymarched&lt;/a&gt; based on &lt;a href="http://glslsandbox.com/e#29798.0"&gt;this code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to note that a logarithmic spiral projected back onto the sphere is a &lt;a href="https://www.jasondavies.com/maps/loxodrome/"&gt;loxodrome&lt;/a&gt;, or rhumb line. This is caused by the logarithmic spiral being also "equiangular": at every point, if you draw a circle centered at the origin that goes through it, the tangent will always make the same angle with the circle. Under stereographic projection, that circle becomes a &lt;a href="https://en.wikipedia.org/wiki/Latitude"&gt;parallel&lt;/a&gt;. Luckily for us, it's easy to generate one: a circle transformed by the droste effect is a logarithmic spiral. Let's superimpose that on our domain coloring to see how it looks on the sphere. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    // r1=0.7, r2=1.4:
    z = droste_(z,0.7,1.4);
    return circle(z,1.)+vec3(hsv2rgb(vec3(atan(z.y,z.x)/PI2,1.,1.)));
}
vec3 color(vec2 z) {
    float onSphere;
    z = sphereViewer(z,onSphere); 
    return onSphere&gt;0.? domain(z): vec3(0);
}"&gt;&lt;/div&gt;

&lt;p&gt;The awesome thing here is that we have a smooth spiral that is (roughly speaking) symmetrical across the equator. If we leave this spiral in our domain coloring, we will get smooth spirals around the zeros and poles of the phase portrait. So far as I know, this is actually a new (or at least rarely used) way to visualize complex functions.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    z = droste_(z,0.7,1.4);
    return circle(z,1.)+phase_portrait(z);
}
vec2 f(vec2 z){
    z = z * 2.;
    return cDiv(z-vec2(1.,0), cMul(z,z)+z+vec2(1.,0));
}
vec3 color(vec2 z) {
    return domain(f(z));
}"&gt;&lt;/div&gt;

&lt;p&gt;The big reveal here is, we're not just working with logarithmic spirals. We're working with the droste effect! So we can draw a complicated Droste image in the domain and it will behave in a similar way. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    z = droste_(z,0.5,1.0);
    return planetaryLinkage(z);
}
vec2 f(vec2 z){
    z = z * 2.;
    return cDiv(z-vec2(1.,0), cMul(z,z)+z+vec2(1.,0));
}
vec3 color(vec2 z) {
    //float onSphere;
    //z = sphereViewer(z,onSphere); 
    //if (onSphere &gt; 0.)
    return domain(f(z));
    //return vec3(0);
}"&gt;&lt;/div&gt;

&lt;p&gt;To draw the two-spiral effect that we saw in the original image, we transform the domain with a &lt;a href="https://en.wikipedia.org/wiki/M%C3%B6bius_transformation"&gt;Möbius transformation&lt;/a&gt; &lt;span class="math"&gt;\(z \mapsto \frac{z-1}{z+1}\)&lt;/span&gt;. Notice that this function has one zero at &lt;span class="math"&gt;\(z=1\)&lt;/span&gt; (the numerator is &lt;span class="math"&gt;\(0\)&lt;/span&gt;) and a pole at &lt;span class="math"&gt;\(z=-1\)&lt;/span&gt; (the denominator is &lt;span class="math"&gt;\(0\)&lt;/span&gt;). This is equivalent, as you can see, to &lt;a href="https://www.youtube.com/watch?v=JX3VmDgiFnY"&gt;tipping&lt;/a&gt; the Riemann sphere sideways by 90 degrees. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    z = droste_(z,0.7,1.4);// r1=0.7, r2=1.4:
    return circle(z,1.)+phase_portrait(z);
}
vec2 f(vec2 z){
    return cDiv(z+vec2(-1,0),z+vec2(1,0));
}
vec3 color(vec2 z) {
    float onSphere; z = sphereViewer(z,onSphere); 
    return onSphere&gt;0.? domain(f(z)): vec3(0);
}"&gt;&lt;/div&gt;

&lt;p&gt;The result applied to our droste domain is more or less similar to the two-spiraled effect that we wanted to emulate in the first place. &lt;/p&gt;
&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;div class="codeAndCanvas" data="vec3 domain(vec2 z){
    z = droste_(z,0.5,1.0);
    return planetaryLinkage(z);
}
vec2 f(vec2 z){
    return cDiv(z+vec2(-1,0),z+vec2(1,0));
}
vec3 color(vec2 z) {
    return domain(f(2.*z));
}"&gt;&lt;/div&gt;

&lt;p&gt;From here, there's any number of complex functions we could play with. Elias Wegert's &lt;a href="http://www.mathe.tu-freiberg.de/~wegert/PhasePlot/images.html"&gt;phase plot gallery&lt;/a&gt; gives a sense of the variety. I decided to draw a Mandelbrot / Julia set. &lt;/p&gt;
&lt;p&gt;The simplest method to draw a Mandelbrot image is to iterate each point &lt;span class="math"&gt;\(z_0\)&lt;/span&gt; through the Mandelbrot function &lt;span class="math"&gt;\(m(z) = z^2 + z_0\)&lt;/span&gt; until it escapes (or doesn't) and then coloring the pixel accordingly, giving up at some large number of iterations. Instead, we're just going to apply the function &lt;span class="math"&gt;\(n\)&lt;/span&gt; times and ignore whether it's escaping or not, to produce a function &lt;span class="math"&gt;\(M_n\)&lt;/span&gt;. Here I draw &lt;span class="math"&gt;\(M_3\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec2 M(vec2 z,vec2 c){    
    // Iterate m(z) 3 times
    for (int i=0; i&lt;3;i++){
        z = cPower(z,2.) + c;
    } return z;
}
vec3 domain(vec2 z){
    //return phase_portrait(z);
    z = droste_(z,0.5,1.0);
    return planetaryLinkage(z);
}
vec3 color(vec2 z) {
    vec2 z0 = (z = z*2.-vec2(0.5,0.));
    z = M(z,z0);
    return domain(z);
}"&gt;&lt;/div&gt;

&lt;p&gt;This produces an interesting result, but I found that applying the Mobius transformation I used before produces a more satisfying picture. This is because the &lt;span class="math"&gt;\(M_n\)&lt;/span&gt; function (in the limit) maps the interior of the Mandelbrot set onto the unit disk. Placing the top and bottom of the loxodrome on the unit circle means that the "interesting" parts of the domain get mapped to somewhere near the boundary. &lt;/p&gt;
&lt;p&gt;Instead of tipping the whole domain, you can just shift the top pole to the unit circle and leave the zero alone with &lt;span class="math"&gt;\(z \mapsto \frac{z}{z+1}\)&lt;/span&gt;. It produces better results for slightly higher values of &lt;span class="math"&gt;\(n\)&lt;/span&gt;, because it's drawing spirals between the boundary of the Mandelbrot and the zeros in the interior. Try experimenting with this here, and above to see what it does to the Riemann sphere.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec2 M(vec2 z,vec2 c){    
    for (int i=0; i&lt;5;i++){
        z = cPower(z,2.) + c;
    } return z;
}
vec3 domain(vec2 z){
    float shade = 0.5-1.*(dot(z,z)-.7);
    z = cDiv((z+vec2(-1,0.000)),(z+vec2(1.0,0.00)));
    //z = cDiv(z-cis(u_time),(z+cis(u_time))); //rotations
    //z = cDiv(z,(z+vec2(1.0,0.0))); //squash-tipping
    //return phase_portrait(z)*shade;
    z = droste_(z,0.5,1.0);
    return planetaryLinkage(z)*shade;
}
vec3 color(vec2 z) {
    z = z*1.2-vec2(0.5,0.);
    vec2 z0 = z;
    z = M(z,z0);
    return domain(z);
}"&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;And finally, here's an interactive animation of the Julia set; it alters the parameter &lt;span class="math"&gt;\(c\)&lt;/span&gt; based on mouse movement. This looks a bit like an orbit trap, but it's not: orbit traps take the point with the smallest magnitude, I'm just taking the final one. &lt;/p&gt;
&lt;p&gt;There is also &lt;a href="/julia-view.html"&gt;a version listing the full source code&lt;/a&gt; rather than the abbreviated code displayed so far. &lt;/p&gt;
&lt;div class="codeAndCanvas extrabig" data="vec2 M(vec2 z,vec2 c){    
    for (int i=0; i&lt;6;i++){
        z = cPower(z,2.) + c;
    } return z;
}
vec3 domain(vec2 z){
    float shade = 0.5-1.*(dot(z,z)-.7);
    //return phase_portrait(z)*shade;
    z = droste_(z,0.5,1.0);
    return planetaryLinkage(z)*shade;
}
vec3 color(vec2 z) {
    vec2 c = mouse_uv();
    //vec2 c = vec2(-0.580,0.460)+cis(u_time)/10.;
    z = M(z*1.5,c);
    return domain(z);
}"&gt;&lt;/div&gt;

&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://westy31.home.xs4all.nl/Geometry/Geometry.html#Fractal_tiling"&gt;Platonic tilings of Riemann surfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.malinc.se/m/"&gt;Malin Christerrson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mathe.tu-freiberg.de/~wegert/visual/index.htm"&gt;Elias Wegert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dhushara.com/DarkHeart/DarkHeart.htm"&gt;Exploding the Dark Heart of Chaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archive.bridgesmathart.org/2013/bridges2013-217.pdf"&gt;The Mercator Redemption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="droste"></category></entry><entry><title>Recreating the Doctor Who Time Tunnel in GLSL</title><link href="http://roy.red/slitscan-.html" rel="alternate"></link><published>2016-04-27T21:34:06-07:00</published><updated>2016-04-27T21:34:06-07:00</updated><author><name>Roy Wiggins</name></author><id>tag:roy.red,2016-04-27:slitscan-.html</id><summary type="html">&lt;p&gt;&lt;img style="float: right;" width="300" src="http://roy.red/images/stargate.gif"/&gt;&lt;/p&gt;
&lt;p&gt;The slit-scan effect is a classic analog special effect. It was most famously used during the "Stargate" sequence in 2001: A Space Odyssey, and a title sequence in Doctor Who. It was done "in camera"- no CGI here at all. It's simple enough that it turns out this effect is absolutely begging to be implemented as a WebGL &lt;a href="http://patriciogonzalezvivo.com/2015/thebookofshaders/01/"&gt;fragment shader&lt;/a&gt;, and the transformation can be done in only a few lines of code! &lt;/p&gt;
&lt;p&gt;FilmmakerIQ produced a great explanation on how the method works practically. It's not required watching, but it explains it visually and shows how it was done.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe src="https://player.vimeo.com/video/71702374" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In case you prefer text: the idea is that you want an animation flying through an animated tunnel. You cut a slit in a card; behind that card is colored plastic brightly lit from behind. You open the camera's shutter and pull it back from the slit. From the point of view of the camera, the slit shrinks and approaches the vanishing point at the center of the frame. Since you did a long exposure, the entire trail of the slit is exposed: it looks like a foreshortened rectangle.&lt;/p&gt;
&lt;p&gt;The real trick is that you move the transparency horizontally (behind the slit) as the camera is moved backward. Successive slices of the texture on the transparency will get exposed to successively "further away" slices on the foreshortened rectangle on film. After you expose one frame, you reset the setup except you advance the start position of the transparency slightly. Rinse repeat and suddenly you have an animated tunnel. &lt;/p&gt;
&lt;p&gt;It turns out you can perform the same tric with an arbitrarily-shaped "slit." Instead of a line, your slit can be a square, a circle, or probably anything. The second-most famous use of the slit-scan showed multiple shapes off: for the Doctor Who time-tunnel, there's even a TARDIS-shaped effect!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/1fnzcAFy8d8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That's enough intro. Let's start implementing the sequence I found most intriguing: the circular tunnel from Doctor Who. Don't forget that the examples here are all live: you can tweak them and the visuals will update themselves thanks to code borrowed from the &lt;a href="http://patriciogonzalezvivo.com/2015/thebookofshaders/"&gt;Book of Shaders&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To start with, we need a texture. Different textures produce widely varying results, but here's one good one using iq's &lt;a href="https://www.shadertoy.com/view/Xd23Dh"&gt;voronoise&lt;/a&gt;. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 color(vec2 pt) {
    return vec3(iqnoise(5.*pt,1.,1.));
}"&gt;&lt;/div&gt;

&lt;p&gt;So. Let's think about the physical way the time-tunnel is created. A given frame can be thought of as composed of a large number of concentric rings, each one corresponding to an exposure of the circular slit imaged at different distances. If a strobe was flashed as the camera moved, there really would be a bunch of visible rings. &lt;/p&gt;
&lt;p&gt;If the transparency never moves, the rings in the final image will all correspond to the &lt;em&gt;same&lt;/em&gt; ring in the original. Let's decide that it's the &lt;a href="https://en.wikipedia.org/wiki/Unit_circle"&gt;unit circle&lt;/a&gt; (centered at the origin with radius 1). To find how to color a particular pixel, we are going to divide it by its distance to the origin. This will scale it up or down to lie on the unit circle.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 color(vec2 pt) {
    pt = pt / length(pt);
    return vec3(iqnoise(5.*pt,1.,1.));
}"&gt;&lt;/div&gt;

&lt;p&gt;Well! That looks about right. It's got the feel of a Star Wars hyperspace jump. The problem is, we're mapping everything to the same slit without moving the pattern, so to speak. &lt;/p&gt;
&lt;p&gt;We need to displace the pattern horizontally, but how much? It turns out the right answer is exactly &lt;code&gt;1 / length(pt)&lt;/code&gt;. This was arrived at by motivated guessing, but the explanation is fairly straightforward. In general, the apparent size of an object is proportional to the reciprocal of its depth in the scene. The inverse of the distance to the origin is exactly how far along each ring is in the tunnel, and we want to paint the texture along the inside of the tunnel. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="vec3 color(vec2 pt) {
    float rInv = 1./length(pt);
    pt = pt * rInv - vec2(rInv,0.0);
    return vec3(iqnoise(5.*pt,1.,1.));
}"&gt;&lt;/div&gt;

&lt;p&gt;And suddenly (shockingly) we've found ourselves in a time tunnel.&lt;/p&gt;
&lt;p&gt;With a few tweaks, you can animate the tunnel and begin to approach the original effect.&lt;/p&gt;
&lt;div style='clear:right'&gt;&lt;/div&gt;

&lt;div class="codeAndCanvas" data="vec3 color(vec2 pt) {
    pt = 1.2*pt;
    float rInv = 1./length(pt);
    pt = pt * rInv - vec2(rInv+2.*mod(u_time,6000.),0.0);
    vec3 color = vec3(0.659,0.772,1.000);
    return color*vec3(iqnoise(5.*pt,1.,1.)+0.240*rInv);
}"&gt;&lt;/div&gt;

&lt;p&gt;What's really fun is that we really are mimicking the original analog transformation, all without drawing a single polygon. I misspent a few hours hand-painting a texture, and managed to render a tunnel whose outlines match the original more or less exactly, so I am confident that this transformation (ignoring constants) really is equivalent to a slit-scan.&lt;/p&gt;
&lt;div style='position:relative;padding-bottom:calc(50% / 2.00);clear:right;'&gt;&lt;iframe src='https://gfycat.com/ifr/IdealFamiliarCusimanse' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Perhaps you want a different shaped tunnel. It's quite easy to induce different shapes simply by altering the distance function. Instead of taking &lt;code&gt;length(pt)&lt;/code&gt;, we will use our own function. By and large, a graph of the &lt;a href="https://en.wikipedia.org/wiki/Contour_line"&gt;contour lines&lt;/a&gt; of this function will reflect the apparent shape of the tunnel. Comment out the marked lines here to experiment with different distance functions. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="float dist(vec2 pt) {
    //return min(abs(pt.x+pt.y),abs(pt.x-pt.y))+0.001;
    //return abs(pt.x+pt.y);
    //return abs(pt.x)+abs(pt.y);
    //return max(abs(pt.x),abs(pt.y));
    return abs(pt.x);
}
vec3 color(vec2 pt) {
    float rInv = 1./dist(pt);
    // Uncomment below to show contours
    // return vec3(fract(rInv));
    pt = pt * rInv - vec2(rInv+mod(u_time,6000.),0.0);
    return vec3(iqnoise(5.*pt,1.,1.)+0.09*rInv);
}"&gt;&lt;/div&gt;

&lt;p&gt;I also have a version of this &lt;a href="https://www.shadertoy.com/view/4dtSWS"&gt;published on Shadertoy&lt;/a&gt; (warning: autoplay sound). That's all for now! There is surely more to explore here- for instance, I haven't found any obvious distance functions that approximate a TARDIS outline, or Tom Baker's head...&lt;/p&gt;</summary><category term="drwho"></category><category term="glsl"></category></entry><entry><title>Implementing the Droste effect in WebGL</title><link href="http://roy.red/droste-.html" rel="alternate"></link><published>2016-04-25T22:33:23-07:00</published><updated>2016-04-25T22:33:23-07:00</updated><author><name>Roy Wiggins</name></author><id>tag:roy.red,2016-04-25:droste-.html</id><summary type="html">&lt;noscript&gt;&lt;h3&gt;Hi! It looks like you've turned off Javascript. I'm sorry to say that WebGL and math rendering require Javascript, so this post will appear broken with Javascript turned off.&lt;/h2&gt;&lt;/noscript&gt;

&lt;p&gt;&lt;a href="http://roy.red/images/Droste.jpg"&gt;&lt;img style="float: right;" width="200" src="http://roy.red/images/Droste.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, I'm going to explore how to implement the so-called "&lt;a href="https://en.wikipedia.org/wiki/Droste_effect"&gt;Droste effect&lt;/a&gt;." The Droste effect is a name given to pictures that contain themselves, like an infinite series of nesting dolls. The conventional Droste effect is interesting, but it was taken to new heights by M.C. Escher's "Print Gallery." &lt;/p&gt;
&lt;p&gt;&lt;a href="http://escherdroste.math.leidenuniv.nl/images/scan450.jpg"&gt;&lt;img style="float: left; margin-right:1em; margin-bottom:0.5em" src="http://roy.red/images/print-gallery.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Print Gallery has the peculiar quality that if you follow the gaze of the person in the lower right corner, into the picture he is looking at, and around the image clockwise you find that you have come back to where you started: looking at a figure, looking at a picture. In some sense, this is a "Droste" picture: the print gallery contains a picture of the city that the print gallery is located in, except "zooming in" is replaced by walking around the origin. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://escherdroste.math.leidenuniv.nl/"&gt;Mathematicians and artists in the Netherlands&lt;/a&gt; managed to reverse-engineer the picture, and determined a transformation that can take an ordinary Droste image to a &lt;a href="https://www.flickr.com/search/?text=droste%20effect"&gt;twisted, Escher-like image&lt;/a&gt;. They published an &lt;a href="http://www.ams.org/notices/200304/fea-escher.pdf"&gt;article&lt;/a&gt; explaining how it works, but on first and second reading I will admit I could make neither head nor tails of it. If it makes more sense to you, the rest of this post is going to be mostly superfluous! If you want to play with an existing implementation, check out &lt;a href="http://www.photospiralysis.com/"&gt;Photospiralysis&lt;/a&gt;, which works in the browser.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://roy.red/images/droste-rect.jpg"&gt;&lt;img style="float: right;" width="200" src="http://roy.red/images/droste-rect-thumb.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wanted to understand how Escher's Print Gallery effect actually worked, and implement it myself. Luckily, the incomparable Jos Leys has written a pretty straightforward &lt;a href="http://www.josleys.com/article_show.php?id=82"&gt;explanation&lt;/a&gt;, with pictures &amp;amp; equations. Most of the following is going to be lifted directly from his article, except we're going to implement it as we read along. I recommend you read his article first, or at least give it a skim.&lt;/p&gt;
&lt;p&gt;The implementation will be as a GLSL fragment shader (aka pixel shader). These are fast, and if you stick to GLSL2.0, it will work happily in the browser and many other places. If you've never touched fragment shaders, it would help to at least glance over &lt;a href="http://patriciogonzalezvivo.com/2015/thebookofshaders/"&gt;The Book of Shaders&lt;/a&gt; first. I am borrowing the author's code framework for displaying live examples.&lt;/p&gt;
&lt;p&gt;Jos Leys explains how the transformation goes forward from a square picture to a Droste picture. To work as a fragment shader, we're going to &lt;strong&gt;invert the transformation&lt;/strong&gt;. For each point in the Droste picture, we work out which point on the original picture maps to it, and color our pixel accordingly. Working in this mode gives a feel of "warping space" rather than warping the image directly. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;We'll begin the same: with an annulus, the area between two circles. I am eliding how the annulus is actually drawn, mostly because I'm not an expert shader writer and my code isn't great. Read The Book of Shaders linked above if you want to learn more about drawing shapes in GLSL.&lt;/p&gt;
&lt;p&gt;Don't forget that these examples are editable: adjust parameters and comment code out to see how it changes the result.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.3;
float r2 = 0.7;
vec3 color(vec2 z) {
    return circles(z,r1,r2);
}"&gt;&lt;noscript&gt;&lt;pre&gt;float r1 = 0.3;
float r2 = 0.7;
vec3 color(vec2 z) {
    return circles(z,r1,r2);
}&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;We are going to think of the annulus as actually sitting in the &lt;a href="https://en.wikipedia.org/wiki/Complex_plane"&gt;complex plane&lt;/a&gt;. We can perform complex arithmetic on our pixels! If you're unfamiliar with complex numbers, it suffices for our purposes to know that complex numbers have two "coordinates" (real and imaginary) and points in the complex plane can be represented as a single number: &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; in the ordinary plane can be thought of as &lt;span class="math"&gt;\(x+yi\)&lt;/span&gt;, a complex number. In GLSL, complex numbers are stored identically to a point in the plane: a &lt;code&gt;vec2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can perform arithmetic on complex numbers in similar ways to ordinary numbers. Addition, multiplication, and exponentiation all have equivalents in the complex plane. Most important for us is the &lt;a href="https://en.wikipedia.org/wiki/Exponentiation#Imaginary_exponents_with_base_e"&gt;complex exponent&lt;/a&gt; and its inverse, the complex logarithm.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z \rightarrow \log(z)\)&lt;/span&gt; has the property that it transforms complex numbers within &lt;span class="math"&gt;\(r\)&lt;/span&gt; units of the origin into a strip &lt;span class="math"&gt;\(2 \pi\)&lt;/span&gt; high and &lt;span class="math"&gt;\(\log(r)\)&lt;/span&gt; wide. &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z \rightarrow \log(\frac{z}{r1})\)&lt;/span&gt; takes the annulus to a similar strip: points inside the annulus are transformed into points within a strip &lt;span class="math"&gt;\(2 \pi\)&lt;/span&gt; high and &lt;span class="math"&gt;\(\log(\frac{r2}{r1})\)&lt;/span&gt; wide.&lt;/p&gt;
&lt;p&gt;The inverse transformation is &lt;span class="math"&gt;\(z \rightarrow e^{z} \cdot r1\)&lt;/span&gt;. Transforming our coordinate system this way &lt;em&gt;before&lt;/em&gt; we draw the circle will have the same effect as drawing the circle and then transforming it forward by the &lt;span class="math"&gt;\(\log\)&lt;/span&gt; transformation.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*4.0; // just so we can see more
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}"&gt;&lt;noscript&gt;&lt;pre&gt;float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*4.0; // just so we can see more
    z = cMul(cExp(z),vec2(r1,0.0));
    return circles(z,r1,r2);
}&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;And we obtain the strip we were looking for. But wait, it's infinitely tall! What's going on? The complex &lt;span class="math"&gt;\(\log\)&lt;/span&gt; is a multi-valued function: it maps the annulus to an infinite number of strips, all stacked up. It's defined as the inverse of the exponential function, and the exponential function actually takes points inside the infinitely tall ribbon to the annulus over and over again.&lt;/p&gt;
&lt;p&gt;So, now we're in what I call &lt;span class="math"&gt;\(\exp\)&lt;/span&gt;-space. The rules are a bit different here. Just looking at the strip we have, left and right correspond to "in-out" in ordinary space; up and down correspond to rotating around the origin. This is the property that will generate the telescoping copies we want! We tile the ribbon horizontally in &lt;span class="math"&gt;\(\exp\)&lt;/span&gt;-space using the modulo function:&lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*4.0; 
    // 2. Tile the strips
    z.x = mod(z.x,log(r2/r1)); 
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}"&gt;&lt;noscript&gt;&lt;pre&gt;float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*4.0; 
    // 2. Tile the strips
    z.x = mod(z.x,log(r2/r1)); 
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;This looks like the wrong order, but since we're actually building an inverse function, later transformations need to be applied above earlier ones. Let's use &lt;span class="math"&gt;\(\log\)&lt;/span&gt; to leave &lt;span class="math"&gt;\(\exp\)&lt;/span&gt;-space and see what our infinite tiling achieved. Even though above I said that the complex logarithm was a multi-valued function, we can define a version that acts like an ordinary function and returns a single value (the &lt;a href="https://en.wikipedia.org/wiki/Principal_value"&gt;principal value&lt;/a&gt;).&lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*1.0; // Play with this to zoom
    // 3. Take the tiled strips back to ordinary space.
    z = cLog(z); 
    // 2. Tile the strips
    z.x = mod(z.x,log(r2/r1));
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}"&gt;&lt;noscript&gt;&lt;pre&gt;float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*1.0; // Play with this to zoom
    // 3. Take the tiled strips back to ordinary space.
    z = cLog(z); 
    // 2. Tile the strips
    z.x = mod(z.x,log(r2/r1));
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}&lt;/noscript&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wow! We're well on our way. Each strip is transformed into another annulus, one nested inside the other. We can zoom in or out as much as we want, and there will always be another nesting annulus. We are sure of this because of the infinite tiling in &lt;span class="math"&gt;\(\exp\)&lt;/span&gt;-space.&lt;/p&gt;
&lt;p&gt;By rotating and scaling the strips in &lt;span class="math"&gt;\(\exp\)&lt;/span&gt;-space, we can create the spiral effect we are looking for. The transformation code here is just an inversion of the Jos Ley's transformation in his step (2): &lt;span class="math"&gt;\(z \rightarrow \frac{z}{e^{\theta i} \cdot cos(\theta)}\)&lt;/span&gt;. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*4.0; 
    // 3. Scale and rotate the strips
    float scale = log(r2/r1);
    float angle = atan(scale/(2.0*PI));
    z = cDiv(z, cExp(vec2(0,angle))*cos(angle)); 
    // 2. Tile the strips
    z.x = mod(z.x,scale);
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}"&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class="math"&gt;\(a+bi\)&lt;/span&gt; and &lt;span class="math"&gt;\(a+(b+2\pi)i\)&lt;/span&gt; are transformed to the same point under the complex logarithm. After this rotation and scale, the top-right corner of each strip is exactly &lt;span class="math"&gt;\(2\pi\)&lt;/span&gt; above the bottom-left. After the logarithmic transformation, the upper right corner of each strip will coincide with the bottom-left corner of the previous. The inner circle and outer circle will connect! The result is a smooth spiral. &lt;/p&gt;
&lt;p&gt;Try commenting out the tiling in the following example. You'll see how the rotation in &lt;span class="math"&gt;\(\exp\)&lt;/span&gt; space has "torn" the annulus along the positive real axis. The tear is (I believe) a visual &lt;a href="https://en.wikipedia.org/wiki/Branch_point#Complex_logarithm"&gt;branch cut&lt;/a&gt;. The tiling repairs the tear by bringing in an infinite number of sheets that extend across all of the branches of the complex logarithm. I've been attempting to teach myself &lt;em&gt;just enough&lt;/em&gt; complex analysis to understand this part, so my explanation may not in fact make any sense. At least, with some playing around, you can see how it works geometrically. &lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.2;
float r2 = 0.7;
vec3 color(vec2 z) {
    z = z*10.0; 
    // 4. Take the tiled strips back to ordinary space.
    z = cLog(z);
    // 3. Scale and rotate the strips
    float scale = log(r2/r1);
    float angle = atan(scale/(2.0*PI));
    z = cDiv(z, cExp(vec2(0,angle))*cos(angle)); 
    // 2. Tile the strips
    z.x = mod(z.x,scale);
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return circles(z,r1,r2);
}"&gt;&lt;/div&gt;

&lt;p&gt;Now we have a Droste effect put together, we can abstract it out to a function. Rather than drawing an annulus, we're going to draw a simple pattern to show what the effect does to more arbitrary shapes. Notice that with a small r1 it begins to resemble the Print Gallery, except the twist is going in the other direction. &lt;/p&gt;
&lt;p&gt;Only now does the most important property of this transformation become apparent: it is &lt;a href="https://en.wikipedia.org/wiki/Conformal_map"&gt;conformal&lt;/a&gt;, which means it preserves angles locally.   Where two lines met at right angles before the transformation, they still do after being Drostified. This means that pictures transformed this way are very likely to remain recognizable.&lt;/p&gt;
&lt;div class="codeAndCanvas" data="float r1 = 0.1;
float r2 = 2.0;
vec2 droste(vec2 z) {
    // 4. Take the tiled strips back to ordinary space.
    z = cLog(z);
    // 3. Scale and rotate the strips
    float scale = log(r2/r1);
    // Negate the angle to twist the other way
    float angle = atan(scale/(2.0*PI));
    z = cDiv(z, cExp(vec2(0,angle))*cos(angle)); 
    // 2. Tile the strips
    z.x = mod(z.x,scale);
    // 1. Take the annulus to a strip
    z = cExp(z)*r1;
    return z;
}
vec3 color(vec2 z){
    z = droste(z);
    // Draw anything you want below!
    z = sin(z*20.0)*10.;
    return vec3(z.x*z.y);
}
"&gt;&lt;/div&gt;

&lt;p&gt;In the next post(s), I'll explore how to handle (Drostifying a square)[http://roy.red/infinite-regression-.html#infinite-regression]. I'll also show how to generalize the effect by adjusting how much it twists, how many arms the spiral has, and more.&lt;/p&gt;
&lt;p&gt;As a reward for making it all the way to the end, here's an example of what you can do with the Droste effect! On the left is the original animation, and on the right the Droste transformation has been applied.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;canvas class="glslCanvas" style:"margin: auto;" data-fragment-url="../shaders/gears.frag" width="500" height="250"&gt;&lt;/canvas&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry></feed>