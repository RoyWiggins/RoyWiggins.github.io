<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roy&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Roy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jan 2018 13:27:09 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Uniting spherical and hyperbolic tilings</title>
      <link>/posts/uniting-spherical-and-hyperbolic-tilings/</link>
      <pubDate>Sat, 06 Jan 2018 13:27:09 +0000</pubDate>
      
      <guid>/posts/uniting-spherical-and-hyperbolic-tilings/</guid>
      <description>In my previous post, I explored generating hyperbolic, euclidean and spherical tilings using circle inversions. While it produced interesting pictures and animations, I wasn&amp;rsquo;t able to derive a formula to generate particular tilings. There&amp;rsquo;s another way to generate tilings that admits a beautifully simple unification of the three geometries. We will need a bit more machinery, but the result is interesting and approaches the problem in a different way. This post is based nearly entirely on Knighty&amp;rsquo;s shader with some help from notes the author left on fractalforums.</description>
    </item>
    
    <item>
      <title>Folding Animated Hyperbolic &amp; Spherical Tilings</title>
      <link>/posts/folding-tilings/</link>
      <pubDate>Wed, 12 Apr 2017 15:46:52 +0000</pubDate>
      
      <guid>/posts/folding-tilings/</guid>
      <description>In a previous post, I talked about generating interesting pictures by iterated folding operations. In this post I&amp;rsquo;m going to use another type of fold to draw both hyperbolic and spherical tilings. If you are already familiar with hyperbolic geometry and tilings, skip the next few paragraphs! There&amp;rsquo;s code down at the bottom.
In order to simplify what we&amp;rsquo;re talking about, we can limit ourselves to tilings of right-angled triangles. In the Euclidean plane, there are two ways to tile the plane this way.</description>
    </item>
    
    <item>
      <title>3D Kaleidoscopic Fractals: Folding the Koch Snowflake</title>
      <link>/posts/folding-the-koch-snowflake/</link>
      <pubDate>Tue, 03 Jan 2017 17:34:06 +0000</pubDate>
      
      <guid>/posts/folding-the-koch-snowflake/</guid>
      <description>How to fold space into a Koch snowflake.</description>
    </item>
    
    <item>
      <title>Building Escher&#39;s Square Limit in Pixels</title>
      <link>/posts/building-eschers-square-limit/</link>
      <pubDate>Sat, 31 Dec 2016 19:16:05 +0000</pubDate>
      
      <guid>/posts/building-eschers-square-limit/</guid>
      <description>I&amp;rsquo;ve been fascinated by M.C. Escher&amp;rsquo;s &amp;ldquo;Square Limit&amp;rdquo; print for a while. In the hopes of understanding it better I decided to try to generate my own square limit images.</description>
    </item>
    
    <item>
      <title>dust</title>
      <link>/shaders/dust/</link>
      <pubDate>Wed, 20 Jul 2016 20:15:16 +0000</pubDate>
      
      <guid>/shaders/dust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Infinite Regression: Many Pictures From One Function</title>
      <link>/posts/infinite-regression/</link>
      <pubDate>Wed, 20 Jul 2016 20:15:16 +0000</pubDate>
      
      <guid>/posts/infinite-regression/</guid>
      <description>Imitating a variety of Escherian limit tilings, as well as a squared-up Droste, by manipulating a simple function.</description>
    </item>
    
    <item>
      <title>Drawing fractal Droste images</title>
      <link>/posts/fractal-droste-images/</link>
      <pubDate>Tue, 17 May 2016 21:31:41 +0000</pubDate>
      
      <guid>/posts/fractal-droste-images/</guid>
      <description>When I was researching Droste images for a previous post, I occasionally came across versions which depicted multiple spirals, rather than the ordinary single spiral. This led me down a rabbit hole to understand what is actually going on in these images, and to see what I could make with the effect.</description>
    </item>
    
    <item>
      <title>Fun with interference patterns</title>
      <link>/posts/interference/</link>
      <pubDate>Wed, 04 May 2016 21:04:56 +0000</pubDate>
      
      <guid>/posts/interference/</guid>
      <description>Ordinary trigonometric functions can produce really interesting, structured patterns if you use sufficiently large numbers.</description>
    </item>
    
    <item>
      <title>Recreating the Doctor Who Time Tunnel in GLSL</title>
      <link>/posts/slitscan/</link>
      <pubDate>Wed, 27 Apr 2016 21:34:06 +0000</pubDate>
      
      <guid>/posts/slitscan/</guid>
      <description>The slit-scan effect is a classic analog special effect used in the &amp;ldquo;Stargate&amp;rdquo; sequence in 2001: A Space Odyssey, and a title sequence in Doctor Who. It turns out this effect is easy to implement, and the transformation can be done in only a few lines of code.</description>
    </item>
    
    <item>
      <title>Implementing the Droste effect in WebGL</title>
      <link>/posts/droste/</link>
      <pubDate>Mon, 25 Apr 2016 22:33:23 +0000</pubDate>
      
      <guid>/posts/droste/</guid>
      <description>The Droste effect is a name given to pictures that contain themselves, like an infinite series of nesting dolls. The conventional Droste effect is interesting, but it was taken to new heights by M.C. Escher&amp;rsquo;s &amp;ldquo;Print Gallery.&amp;rdquo; I wanted to understand how Escher&amp;rsquo;s Print Gallery effect actually worked, and implement it myself.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>/pages/resources/</link>
      <pubDate>Thu, 07 Apr 2016 22:27:56 +0000</pubDate>
      
      <guid>/pages/resources/</guid>
      <description>Tutorials The Book of Shaders Good intro to GLSL fragment shaders in general.
Raymarching Distance Fields How does raymarching work? This article has an introduction.
RayMarching 101 Heavily-commented and unobfuscated raymarching examples.
GLSL tools Fragmentarium Pixel shader playground. Shadertoy on the desktop, except you can also add UI elements (sliders, etc) to adjust uniforms on-the-fly. Really really good. Dive into mandelbulbs, render Droste images, fly through hyperbolic spaces.
Synthclipse GLSL shader prototyping tool based on the Eclipse IDE.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pages/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pages/resume/</guid>
      <description>Title: Resume Slug: resume Date: 2016-05-04 21:04:56 Tags: Category: Author: Lang: Summary: Status: published
ContactRoy Wiggins@RoyWigginsGitHubr...@gmail.comSkills Languages Python, C, C#, SQL, JavaScript, Rust, Bash, Forth, Lisp, GLSL, MATLAB, LaTeX, Regular Expressions
Frameworks &amp;amp; Platforms Flask, jQuery, Underscore, React, Git, Subversion
Linux, Windows, Raspberry Pi, Arduino, iOS, Android
Education BA in Mathematics from Carleton College, Class of 2013. GPA 3.612.
Experience Software Developer, Epic Systems, 2013-2015 On the MyChart team, working on Epic&amp;rsquo;s patient portal system.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/droste2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/droste2/</guid>
      <description>Title: Slug: droste 2 Date: 2016-04-25 23:58:02 Tags: Category: Author: Lang: Summary:
float r1 = 0.12; float r2 = 1.9; vec2 droste(vec2 z) { // 4. Take the tiled strips back to ordinary space. z = cLog(z); // 3. Scale and rotate the strips float scale = log(r2/r1); // Negate the angle to twist the other way float angle = atan(scale/(2.0*PI)); z = cDiv(z, cExp(vec2(0,angle))*cos(angle)); // 2. Tile the strips z.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/glsl-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/glsl-test/</guid>
      <description>Title: GLSL test Slug: glsl-test Date: 2016-10-28 16:13:01 Tags: Category: Author: Lang: Summary: Testing
foobar
bar</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/hello-world/</guid>
      <description>Title: Hello world Slug: Date: 2016-04-02 18:40:03 Tags: Category: Author: Roy Wiggins Lang: Summary:
Hello world.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/textures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/textures/</guid>
      <description>Title: Test Slug: textures Date: 2016-05-31 23:47:34 Tags: Category: Author: Lang: Summary:
0.? domain(z): vec3(0);}&#34;</description>
    </item>
    
  </channel>
</rss>
